(defvar eemacs-treemacs/var/func-indicator (make-symbol "eemacs-treemacs-func-indicator"))
(defmacro eemacs-treemacs/macro/defun-with-op-indc (&rest args)
  (declare (doc-string 3) (indent 2))
  (let* ((fsym (car args))
         (arg-list (cadr args))
         (doc  (and (stringp (nth 2 args)) (nth 2 args)))
         (decl (and (listp (nth 3 args)) (eq 'declare (car (nth 3 args))) (nth 3 args)))
         (inct (and (listp (nth 4 args)) (eq 'interactive (car (nth 4 args))) (nth 4 args)))
         (body (if doc (if decl (if inct (nthcdr 5 args) (nthcdr 4 args))
                         (if inct (nthcdr 4 args) (nthcdr 3 args)))
                 (if decl (if inct (nthcdr 4 args) (nthcdr 3 args))
                   (if inct (nthcdr 3 args) (nthcdr 2 args)))))
         (hbody (delete nil `(,doc ,decl ,inct))))
    `(defun ,fsym ,arg-list ,@hbody
            (let ((,eemacs-treemacs/var/func-indicator ',fsym))
              (ignore ,eemacs-treemacs/var/func-indicator)
              ,@body))))

(defvar eemacs-treemacs/var/catch-sym (make-symbol ":eemacs-treemacs-catch-sym"))
(defmacro eemacs-treemacs/macro/catch (&rest body)
  `(catch (quote ,eemacs-treemacs/var/catch-sym) ,@body))
(defmacro eemacs-treemacs/macro/return (rtn)
  `(throw (quote ,eemacs-treemacs/var/catch-sym) ,rtn))

(defmacro eemacs-treemacs/macro/let* (&rest args)
  (declare (indent 1))
  `(eemacs-treemacs/macro/catch (let* ,@args)))

(defun eemacs-treemacs/func/treemacs-maybe-init ()
  (let ((treemacs-select-when-already-in-treemacs 'stay))
    (pcase (treemacs-current-visibility)
      ('exists  (treemacs-select-window))
      ('none    (treemacs-select-window))
      ('visible (treemacs-select-window)))))

(provide 'eemacs-treemacs-defs)
